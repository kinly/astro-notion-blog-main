---
import * as interfaces from '../lib/interfaces.ts'
import {
  isTweetURL,
  isAmazonURL,
  buildURLToHTMLMap,
} from '../lib/blog-helpers.ts'
import Paragraph from './notion-blocks/Paragraph.astro'
import Heading1 from './notion-blocks/Heading1.astro'
import Heading2 from './notion-blocks/Heading2.astro'
import Heading3 from './notion-blocks/Heading3.astro'
import TableOfContents from './notion-blocks/TableOfContents.astro'
import Image from './notion-blocks/Image.astro'
import Video from './notion-blocks/Video.astro'
import Code from './notion-blocks/Code.astro'
import Quote from './notion-blocks/Quote.astro'
import Equation from './notion-blocks/Equation.astro'
import Callout from './notion-blocks/Callout.astro'
import Embed from './notion-blocks/Embed.astro'
import Bookmark from './notion-blocks/Bookmark.astro'
import Divider from './notion-blocks/Divider.astro'
import Table from './notion-blocks/Table.astro'
import ColumnList from './notion-blocks/ColumnList.astro'
import BulletedListItems from './notion-blocks/BulletedListItems.astro'
import NumberedListItems from './notion-blocks/NumberedListItems.astro'
import ToDo from './notion-blocks/ToDo.astro'
import SyncedBlock from './notion-blocks/SyncedBlock.astro'
import Toggle from './notion-blocks/Toggle.astro'
import File from './notion-blocks/File.astro'
import LinkToPage from './notion-blocks/LinkToPage.astro'

export interface Props {
  blocks: interfaces.Block[]
  isRoot: boolean
  level: number
  headings: interfaces.Block[]
}

const {
  blocks: rawBlocks,
  isRoot = false,
  level = 1,
  headings: rawHeadings = [],
} = Astro.props

// 扩展List类型同时包含Block必需的属性
interface ExtendedList extends interfaces.List {
  Id: string
  HasChildren: boolean
}

const blocks = rawBlocks.reduce<(interfaces.Block | ExtendedList)[]>((arr, block: interfaces.Block, i: number) => {
  const isBulletedListItem = block.Type === 'bulleted_list_item'
  const isNumberedListItem = block.Type === 'numbered_list_item'
  const isToDo = block.Type === 'to_do'
  if (!isBulletedListItem && !isNumberedListItem && !isToDo) {
    return [...arr, block]
  }

  let listType = ''
  if (isBulletedListItem) {
    listType = 'bulleted_list'
  } else if (isNumberedListItem) {
    listType = 'numbered_list'
  } else {
    listType = 'to_do_list'
  }

  if (i === 0) {
    const list: ExtendedList = {
      Type: listType,
      ListItems: [block],
      Id: `list-${block.Id}`,
      HasChildren: true
    }
    return [...arr, list]
  }

  const prevItem = arr[arr.length - 1]
  
  // 检查前一项是否是列表类型
  if (!('ListItems' in prevItem) || 
    (isBulletedListItem && prevItem.Type !== 'bulleted_list') ||
    (isNumberedListItem && prevItem.Type !== 'numbered_list') ||
    (isToDo && prevItem.Type !== 'to_do_list')
  ) {
    const list: ExtendedList = {
      Type: listType,
      ListItems: [block],
      Id: `list-${block.Id}`,
      HasChildren: true
    }
    return [...arr, list]
  }

  // 此时我们知道prevItem有ListItems属性
  (prevItem as ExtendedList).ListItems.push(block)

  return arr
}, [])

let headings = rawHeadings
if (isRoot) {
  headings = blocks.filter((b) => 
    b.Type === 'heading_1' || b.Type === 'heading_2' || b.Type === 'heading_3'
  ) as interfaces.Block[]
}

// 获取可能含有URL的块
const bookmarkBlocks = blocks
  .filter((b) => 
    b.Type === 'bookmark' || b.Type === 'link_preview' || b.Type === 'embed'
  ) as interfaces.Block[]

// 从块中提取URL
const bookmarkURLs = bookmarkBlocks
  .map((b: interfaces.Block) => {
    const urlString = (b.Bookmark || b.LinkPreview || b.Embed)?.Url || ''

    let url: URL | undefined
    try {
      url = new URL(urlString)
    } catch (err) {
      console.log(err)
    }
    return url
  })
  .filter((url): url is URL => url !== undefined && !isTweetURL(url) && !isAmazonURL(url))

const bookmarkURLMap = await buildURLToHTMLMap(bookmarkURLs)
---

{blocks.map((block) => {
    switch (block.Type) {
      case 'paragraph':
        return <Paragraph block={block as interfaces.Block} headings={headings} />
      case 'heading_1':
        return <Heading1 block={block as interfaces.Block} headings={headings} />
      case 'heading_2':
        return <Heading2 block={block as interfaces.Block} headings={headings} />
      case 'heading_3':
        return <Heading3 block={block as interfaces.Block} headings={headings} />
      case 'table_of_contents':
        return <TableOfContents block={block as interfaces.Block} headings={headings} />
      case 'image':
        return <Image block={block as interfaces.Block} />
      case 'video':
        return <Video block={block as interfaces.Block} />
      case 'code':
        return <Code block={block as interfaces.Block} />
      case 'quote':
        return <Quote block={block as interfaces.Block} headings={headings} />
      case 'equation':
        return <Equation block={block as interfaces.Block} />
      case 'callout':
        return <Callout block={block as interfaces.Block} headings={headings} />
      case 'embed':
        return <Embed block={block as interfaces.Block} urlMap={bookmarkURLMap} />
      case 'bookmark':
      case 'link_preview':
        return <Bookmark block={block as interfaces.Block} urlMap={bookmarkURLMap} />
      case 'divider':
        return <Divider />
      case 'table':
        return <Table block={block as interfaces.Block} />
      case 'column_list':
        return <ColumnList block={block as interfaces.Block} headings={headings} />
      case 'bulleted_list':
        return <BulletedListItems block={block as unknown as interfaces.Block} headings={headings} />
      case 'numbered_list':
        return (
          <NumberedListItems block={block as unknown as interfaces.Block} level={level} headings={headings} />
        )
      case 'to_do_list':
        return <ToDo block={block as unknown as interfaces.Block} headings={headings} />
      case 'synced_block':
        return <SyncedBlock block={block as interfaces.Block} headings={headings} />
      case 'toggle':
        return <Toggle block={block as interfaces.Block} headings={headings} />
      case 'file':
        return <File block={block as interfaces.Block} />
      case 'link_to_page':
        return <LinkToPage block={block as interfaces.Block} />
    }
    return null
  })}
