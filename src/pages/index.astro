---
import Layout from '../layouts/Layout.astro';
import { getDatabase, getAllPosts } from '../lib/notion/client';
import type { Post } from '../lib/interfaces';

const [database, posts] = await Promise.all([getDatabase(), getAllPosts()]);
const latestPosts = posts.slice(0, 6); // 只显示最新的6篇文章
const allTags = [...new Set(posts.flatMap((post: Post) => post.Tags.map(tag => tag.name)))];
---

<Layout 
  title="AI233 - 个人博客" 
  description="欢迎来到我的个人博客，这里记录着我的技术探索和思考。"
  ogImage="/og-image.png"
  path="/"
  hideSidebar={true}
  hideHeader={true}
>
  <div class="home-page">
    <!-- 英雄区域 -->
    <section class="hero">
      <div class="hero-content">
        <h1 class="hero-title">自由探索无限可能</h1>
        <p class="hero-subtitle">探索、创造、分享</p>
        <a href="/blog" class="cta-button">
          浏览所有文章
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <line x1="5" y1="12" x2="19" y2="12"></line>
            <polyline points="12 5 19 12 12 19"></polyline>
          </svg>
        </a>
      </div>
      <div class="video-loading-container">
        <div class="video-loading-spinner"></div>
        <p class="loading-text">视频加载中...</p>
      </div>
      <video class="hero-video" autoplay muted loop playsinline>
        <source src="/banner.mp4" type="video/mp4">
      </video>
      <div class="hero-overlay"></div>
    </section>

    <!-- 内容区域 -->
    <div class="content-area">
      <!-- 关于我 -->
      <section class="content-section about">
        <div class="glass-container">
          <h2>关于我</h2>
          <p>热爱技术，热爱生活。在这里，我会分享我的技术学习心得、项目经验以及生活感悟。</p>
        </div>
      </section>

      <!-- 最新文章 -->
      <section class="content-section latest-posts">
        <div class="glass-container">
          <h2>最新文章</h2>
          <div class="posts-grid">
            {latestPosts.map((post: Post) => (
              <article class="post-card">
                <a href={`/posts/${post.Slug}`}>
                  <h3>{post.Title}</h3>
                  <p class="post-excerpt">{post.Excerpt}</p>
                  <div class="post-meta">
                    <span class="post-date">{new Date(post.Date).toLocaleDateString()}</span>
                    <span class="post-categories">
                      {post.Tags.map(tag => (
                        <span class="category-tag">{tag.name}</span>
                      ))}
                    </span>
                  </div>
                </a>
              </article>
            ))}
          </div>
          <div class="view-more">
            <a href="/blog" class="cta-button">浏览所有文章
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="5" y1="12" x2="19" y2="12"></line>
                <polyline points="12 5 19 12 12 19"></polyline>
              </svg>
            </a>
          </div>
        </div>
      </section>

      <!-- 标签云 -->
      <section class="content-section tags-section">
        <div class="glass-container">
          <h2>标签</h2>
          <div class="tag-cloud">
            {allTags.map(tag => (
              <a href={`/posts/tag/${tag}`} class="tag">{tag}</a>
            ))}
          </div>
        </div>
      </section>
    </div>
  </div>
</Layout>

<style>
  :root {
    --content-max-width: 1200px;
    --font-size-base: 18px;
    --font-family-english: 'Segoe UI', -apple-system, BlinkMacSystemFont, Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    --primary-color: #4776E6;
    --secondary-color: #8E54E9;
    --glass-background: rgba(20, 20, 30, 0.5);
    --glass-border: rgba(255, 255, 255, 0.1);
    --glass-highlight: rgba(255, 255, 255, 0.15);
    --text-light: rgba(255, 255, 255, 0.9);
    --text-lighter: rgba(255, 255, 255, 0.7);
  }

  /* 页面容器 */
  .home-page {
    width: 100%;
    margin: 0;
    padding: 0;
    font-size: var(--font-size-base);
    font-family: var(--font-family-english), "Microsoft YaHei", "微软雅黑", sans-serif;
    overflow-x: hidden;
    position: relative;
    min-height: 100vh;
    color: var(--text-light);
  }

  /* 英雄区域 */
  .hero {
    position: relative;
    width: 100%;
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    color: #fff;
    overflow: hidden;
  }

  /* 视频背景 */
  .hero-video {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    z-index: -2;
    opacity: 0;
    transition: opacity 1s ease;
  }

  .hero-video.loaded {
    opacity: 1;
  }

  /* 遮罩层 */
  .hero-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    z-index: -1;
  }

  /* 英雄区域内容 */
  .hero-content {
    max-width: 800px;
    padding: 2rem;
    position: relative;
    z-index: 5;
  }

  .hero-title {
    font-size: 3.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
    color: #ffffff;
    text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
    animation: fadeInUp 1s ease-out;
  }

  .hero-subtitle {
    font-size: 1.5rem;
    margin-bottom: 2rem;
    color: rgba(255, 255, 255, 0.95);
    text-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    animation: fadeInUp 1s ease-out 0.2s backwards;
  }

  .cta-button {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.8rem 1.8rem;
    background: rgba(255, 255, 255, 0.15);
    backdrop-filter: blur(12px);
    -webkit-backdrop-filter: blur(12px);
    border: 1px solid rgba(255, 255, 255, 0.3);
    border-radius: 30px;
    color: #fff;
    font-size: 1rem;
    font-weight: 500;
    text-decoration: none;
    transition: all 0.3s ease;
    animation: fadeInUp 1s ease-out 0.4s backwards;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    cursor: pointer;
  }

  .cta-button:hover {
    background: rgba(255, 255, 255, 0.25);
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.25);
  }

  /* 内容区域 - 无背景，直接显示在视频上 */
  .content-area {
    position: relative;
    z-index: 2;
    padding-bottom: 4rem;
  }

  /* 内容部分通用样式 */
  .content-section {
    padding: 2.5rem 0;
    text-align: center;
  }

  /* 磨砂玻璃容器 */
  .glass-container {
    max-width: var(--content-max-width);
    margin: 0 auto;
    padding: 1.5rem;
    background: var(--glass-background);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border-radius: 16px;
    border: 1px solid var(--glass-border);
    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
  }

  /* 内容标题 */
  .content-section h2 {
    font-size: 2.2rem;
    margin-top: 0.5rem;
    margin-bottom: 1.5rem;
    color: var(--text-light);
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  }

  /* 关于我部分 */
  .about p {
    font-size: 1.1rem;
    line-height: 1.6;
    color: var(--text-lighter);
    max-width: 800px;
    margin: 0 auto;
  }

  /* 最新文章部分 */
  .posts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
    margin: 2rem 0;
  }

  .post-card {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    overflow: hidden;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    border: 1px solid var(--glass-border);
  }

  .post-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
    background: rgba(255, 255, 255, 0.15);
  }

  .post-card a {
    text-decoration: none;
    color: inherit;
    display: block;
    padding: 1.5rem;
  }

  .post-card h3 {
    font-size: 1.2rem;
    margin-bottom: 0.8rem;
    color: var(--text-light);
    line-height: 1.4;
  }

  .post-excerpt {
    color: var(--text-lighter);
    margin-bottom: 1.2rem;
    line-height: 1.5;
    font-size: 0.95rem;
  }

  .post-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    color: var(--text-lighter);
    font-size: 0.85rem;
  }

  .category-tag {
    background: rgba(255, 255, 255, 0.15);
    padding: 0.3rem 0.8rem;
    border-radius: 15px;
    font-size: 0.8rem;
    color: var(--text-light);
    margin-left: 0.5rem;
    transition: background 0.2s ease;
  }

  .category-tag:hover {
    background: rgba(255, 255, 255, 0.25);
  }

  .view-more {
    margin-top: 2.5rem;
  }

  .button {
    display: inline-block;
    padding: 0.8rem 2rem;
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    color: #fff;
    text-decoration: none;
    border-radius: 30px;
    font-weight: 500;
    font-size: 1rem;
    transition: all 0.3s ease;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
  }

  .button:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
  }

  /* 标签区域 */
  .tag-cloud {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    justify-content: center;
  }

  .tag {
    background: rgba(255, 255, 255, 0.1);
    padding: 0.5rem 1rem;
    border-radius: 20px;
    color: var(--text-light);
    font-weight: 500;
    font-size: 0.9rem;
    text-decoration: none;
    transition: all 0.3s ease;
    border: 1px solid var(--glass-border);
  }

  .tag:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  /* 动画 */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* 响应式调整 */
  @media (max-width: 768px) {
    .hero-title {
      font-size: 2.2rem;
    }

    .hero-subtitle {
      font-size: 1.2rem;
    }

    .content-section h2 {
      font-size: 1.8rem;
    }

    .posts-grid {
      grid-template-columns: 1fr;
    }
    
    .content-section {
      padding: 3rem 0;
    }
    
    .glass-container {
      margin: 0 1rem;
      padding: 1.5rem;
    }
  }
  
  @media (max-width: 480px) {
    .hero-title {
      font-size: 1.8rem;
    }
    
    .hero-subtitle {
      font-size: 1rem;
    }
    
    .cta-button {
      padding: 0.7rem 1.3rem;
      font-size: 0.9rem;
    }
    
    .glass-container {
      padding: 1rem;
    }
  }
  
  /* Safari浏览器特殊处理 */
  @supports (-webkit-touch-callout: none) {
    .hero-video {
      position: fixed;
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
  }

  .video-loading-container {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 1;
    text-align: center;
    color: white;
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
  }
  
  .video-loading-container.visible {
    opacity: 1;
  }
  
  .video-loading-spinner {
    width: 40px;
    height: 40px;
    margin: 0 auto 1rem;
    border: 4px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top-color: white;
    animation: spin 1s ease-in-out infinite;
  }
  
  @keyframes spin {
    to { transform: rotate(360deg); }
  }
  
  .loading-text {
    font-size: 1rem;
    margin: 0;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const video = document.querySelector('.hero-video');
    const loadingContainer = document.querySelector('.video-loading-container');
    
    if (video && loadingContainer) {
      // 显示加载指示器
      loadingContainer.classList.add('visible');
      
      // 视频可以播放时
      video.addEventListener('canplay', () => {
        // 隐藏加载指示器
        loadingContainer.classList.remove('visible');
        video.classList.add('loaded');
      });
      
      // 如果视频加载失败或超时
      video.addEventListener('error', () => {
        loadingContainer.innerHTML = '<p>视频加载失败，请刷新页面重试</p>';
      });
      
      // 设置超时处理
      const timeout = setTimeout(() => {
        if (!video.classList.contains('loaded')) {
          // 超过10秒仍未加载完成，更新加载状态提示
          loadingContainer.innerHTML = '<p>视频加载较慢，请稍候...</p>';
        }
      }, 10000);
      
      // 清理超时定时器
      video.addEventListener('canplay', () => {
        clearTimeout(timeout);
      });
    }
  });
</script>
