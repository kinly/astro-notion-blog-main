---
import type { SelectProperty } from '../../../lib/interfaces.ts'
import { NUMBER_OF_POSTS_PER_PAGE } from '../../../server-constants.ts'
import {
  getPostsByTag,
  getAllTags,
  getNumberOfPagesByTag,
} from '../../../lib/notion/client.ts'
import { getPostLink, getTagLink } from '../../../lib/blog-helpers.ts'
import Layout from '../../../layouts/Layout.astro'
import NoContents from '../../../components/NoContents.astro'
import PostDate from '../../../components/PostDate.astro'
import PostTags from '../../../components/PostTags.astro'
import PostTitle from '../../../components/PostTitle.astro'
import PostFeaturedImage from '../../../components/PostFeaturedImage.astro'
import PostExcerpt from '../../../components/PostExcerpt.astro'
import Pagination from '../../../components/Pagination.astro'
import BlogPostsLink from '../../../components/BlogPostsLink.astro'
import BlogTagsLink from '../../../components/BlogTagsLink.astro'
import styles from '../../../styles/blog.module.css'
import '../../../styles/notion-color.css'

export async function getStaticPaths() {
  const allTags = await getAllTags()
  return allTags.map((tag: SelectProperty) => ({
    params: {
      tag: tag.name
    }
  }))
}

const { tag } = Astro.params
const encodedTag = encodeURIComponent(tag)

// 获取文章和分页信息
const [posts, numberOfPages] = await Promise.all([
  getPostsByTag(tag, NUMBER_OF_POSTS_PER_PAGE),
  getNumberOfPagesByTag(tag),
])

console.log('标签页首页信息:', {
  tag,
  totalPages: numberOfPages,
  postsCount: posts.length
})

// 检查是否有文章
if (posts.length === 0) {
  console.log(`标签 "${tag}" 下没有文章，重定向到首页`)
  return Astro.redirect('/')
}

const currentTag = posts[0].Tags.find((t) => t.name === tag)
---

<Layout
  title={`分类: ${tag}`}
  description={`${tag}分类下的文章列表`}
  path={`/posts/tag/${encodedTag}`}
  ogImage=""
  hideSidebar={true}
  breadcrumbs={[
    { label: '所有文章', href: '/' },
    { label: `分类: ${tag}`, href: getTagLink(tag) }
  ]}
>
  <div class="blog-posts-container" id="tag-posts-container">
    <header>
      <div class="tag-container">
        <span class={`tag ${currentTag?.color}`}>{tag}</span>
      </div>
    </header>

    <div class="posts-grid">
      {console.log('渲染文章列表，文章数量:', posts.length)}
      {console.log('文章数据:', JSON.stringify(posts.map(post => ({
        title: post.Title,
        slug: post.Slug,
        date: post.Date,
        tags: post.Tags,
        excerpt: post.Excerpt,
        hasFeaturedImage: !!post.FeaturedImage,
        hasCover: !!post.Cover,
        hasFirstImage: !!post.FirstImage
      })), null, 2))}
      {posts.length === 0 ? (
        <NoContents contents={posts} />
      ) : (
        posts.map((post) => (
          <article class="blog-post">
            <a href={getPostLink(post.Slug)} class="blog-post-link">
              {(post.FeaturedImage?.Url || post.Cover?.Url || post.FirstImage?.Url) && (
                <div class="blog-post-image">
                  <PostFeaturedImage post={post} />
                </div>
              )}
              <div class="blog-post-content">
                <div class="blog-post-header">
                  <PostTitle post={post} enableLink={false} />
                  <PostDate post={post} />
                </div>
                <div class="blog-post-tags">
                  <PostTags post={post} enableLink={true} />
                </div>
                <div class="blog-post-body">
                  <PostExcerpt post={post} />
                </div>
              </div>
            </a>
          </article>
        ))
      )}
    </div>

    <div class="pagination-container">
      <Pagination currentPage={1} numberOfPages={numberOfPages} tag={tag} />
    </div>
  </div>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    console.log('页面加载完成，标签页首页信息:', {
      tag,
      currentPage: 1,
      totalPages: numberOfPages,
      postsCount: posts.length
    });

    // 为所有标签链接添加点击事件，阻止事件冒泡
    document.querySelectorAll('.blog-post-tags .post-tags a').forEach(tag => {
      tag.addEventListener('click', (e) => {
        e.stopPropagation();
      });
    });

    // 检查分页链接是否正确
    const paginationLinks = document.querySelectorAll('.pagination a');
    paginationLinks.forEach(link => {
      const href = link.getAttribute('href');
      if (href) {
        console.log('分页链接:', href);
      }
    });
  });
</script>

<style>
  .blog-posts-container {
    padding: 0;
    max-width: 1200px;
    margin: 0 auto;
  }

  .posts-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 2rem;
    margin-top: 2rem;
    padding: 0;
  }

  @media (max-width: 1024px) {
    .posts-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 768px) {
    .posts-grid {
      grid-template-columns: 1fr;
    }
  }

  .tag-container {
    margin: 1.5rem 0;
    text-align: center;
  }

  .tag {
    display: inline-block;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    font-weight: 600;
  }

  .pagination-container {
    display: flex;
    justify-content: center;
    margin: 2rem 0;
  }

  .blog-post {
    background: #fff;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    overflow: hidden;
    transition: transform 0.2s ease, box-shadow 0.3s ease;
  }

  .blog-post:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
  }

  .blog-post-link {
    display: block;
    color: inherit;
    text-decoration: none;
  }

  .blog-post-image {
    width: 100%;
    height: 200px;
    overflow: hidden;
  }

  .blog-post-image :global(img) {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .blog-post:hover .blog-post-image :global(img) {
    transform: scale(1.05);
  }

  .blog-post-content {
    padding: 1.5rem;
  }

  .blog-post-header {
    margin-bottom: 1rem;
  }

  .blog-post-header :global(.post-title) {
    font-size: 1.25rem;
    font-weight: 600;
    line-height: 1.4;
    margin: 0 0 0.5rem 0;
  }

  .blog-post-tags {
    margin-bottom: 1rem;
  }

  .blog-post-body {
    font-size: 0.95rem;
    color: #666;
    line-height: 1.6;
  }
</style>
