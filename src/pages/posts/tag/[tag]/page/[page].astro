---
import type { SelectProperty } from '../../../../../lib/interfaces.ts'
import { NUMBER_OF_POSTS_PER_PAGE } from '../../../../../server-constants.ts'
import {
  getPostsByTagAndPage,
  getRankedPosts,
  getAllTags,
  getNumberOfPagesByTag,
  getAllPosts,
} from '../../../../../lib/notion/client.ts'
import { getPostLink, getTagLink, getPageLink } from '../../../../../lib/blog-helpers.ts'
import Layout from '../../../../../layouts/Layout.astro'
import NoContents from '../../../../../components/NoContents.astro'
import PostDate from '../../../../../components/PostDate.astro'
import PostTags from '../../../../../components/PostTags.astro'
import PostTitle from '../../../../../components/PostTitle.astro'
import PostFeaturedImage from '../../../../../components/PostFeaturedImage.astro'
import PostExcerpt from '../../../../../components/PostExcerpt.astro'
import Pagination from '../../../../../components/Pagination.astro'
import BlogPostsLink from '../../../../../components/BlogPostsLink.astro'
import BlogTagsLink from '../../../../../components/BlogTagsLink.astro'
import styles from '../../../../../styles/blog.module.css'
import '../../../../../styles/notion-color.css'

export async function getStaticPaths() {
  const allTags = await getAllTags()
  const allPosts = await getAllPosts()
  
  let params: { params: { tag: string, page: string } }[] = []

  await Promise.all(
    allTags.map((tag: SelectProperty) => {
      // 先过滤出该标签下的所有文章
      const tagPosts = allPosts.filter(post => 
        post.Tags.find(t => t.name === tag.name)
      )
      
      // 计算该标签下的页数
      const numberOfPages = Math.ceil(tagPosts.length / NUMBER_OF_POSTS_PER_PAGE)
      
      // 为每个有足够文章的标签创建分页路径
      if (numberOfPages > 1) {
        // 计算每一页应该显示的文章
        for (let i = 2; i <= numberOfPages; i++) {
          const startIndex = (i - 1) * NUMBER_OF_POSTS_PER_PAGE
          const endIndex = startIndex + NUMBER_OF_POSTS_PER_PAGE
          const pageArticles = tagPosts.slice(startIndex, endIndex)
          
          // 只有当该页确实有文章时才创建路径
          if (pageArticles.length > 0) {
            params.push({ params: { tag: tag.name, page: i.toString() } })
          }
        }
      }
    })
  )

  return params
}

const { tag, page } = Astro.params

const [posts, rankedPosts, tags, numberOfPages] = await Promise.all([
  getPostsByTagAndPage(tag, parseInt(page, 10)),
  getRankedPosts(),
  getAllTags(),
  getNumberOfPagesByTag(tag),
])

const currentTag = posts.length > 0 ? posts[0].Tags.find((t) => t.name === tag) : null;
const encodedTag = encodeURIComponent(tag);
const pageNum = parseInt(page, 10);

// 检查页面有效性并在客户端重定向
const isValidPage = posts.length > 0 || pageNum <= 1;
const redirectInfo = {
  shouldRedirect: !isValidPage,
  encodedTag,
  pageCount: numberOfPages,
  currentPage: pageNum
};
---

<Layout 
  title={`分类: ${tag} - 第${page}页`} 
  description={`${tag}分类下的文章列表 - 第${page}页`} 
  path={`/posts/tag/${encodedTag}/page/${page}`} 
  ogImage=""
  hideSidebar={true}
  breadcrumbs={[
    { label: '所有文章', href: '/' },
    { label: `分类: ${tag}`, href: getTagLink(tag) },
    { label: `第${page}页`, href: getPageLink(pageNum, tag) }
  ]}
>
  <div slot="main" class={`${styles.main} blog-posts-container`} id="tag-posts-container">
    <header>
      <div class="tag-container">
        <span class={`tag ${currentTag?.color}`}>{tag}</span>
      </div>
    </header>

    <div class="masonry-container">
      <div class="masonry-grid">
        {posts.length === 0 ? (
          <NoContents contents={posts} />
        ) : (
          posts.map((post) => (
            <article class="blog-post">
              <a href={getPostLink(post.Slug)} class="blog-post-link">
                {(post.FeaturedImage?.Url || post.Cover?.Url || post.FirstImage?.Url) && (
                  <div class="blog-post-image">
                    <PostFeaturedImage post={post} />
                  </div>
                )}
                <div class="blog-post-content">
                  <div class="blog-post-header">
                    <PostTitle post={post} enableLink={false} />
                    <PostDate post={post} />
                  </div>
                  <div class="blog-post-tags">
                    <PostTags post={post} enableLink={true} />
                  </div>
                  <div class="blog-post-body">
                    <PostExcerpt post={post} />
                  </div>
                </div>
              </a>
            </article>
          ))
        )}
      </div>
    </div>

    <div class="pagination-container">
      <Pagination 
        currentPage={parseInt(page, 10)} 
        numberOfPages={numberOfPages} 
        tag={tag} 
      />
    </div>
  </div>
</Layout>

<script define:vars={{ redirectInfo }}>
  // 页面加载完成后检查是否需要重定向
  document.addEventListener('DOMContentLoaded', () => {
    // 检查是否需要重定向（当前页面无内容且不是第一页，或页码超出有效范围）
    if (redirectInfo.shouldRedirect || redirectInfo.currentPage > redirectInfo.pageCount) {
      console.log('需要重定向: 当前页面无内容或页码超出范围');
      
      // 重定向到标签的第一页
      window.location.href = `/posts/tag/${redirectInfo.encodedTag}`;
      return;
    }
    
    // 检查内容是否为空，如果为空并且不是第一页，也进行重定向
    const container = document.getElementById('tag-posts-container');
    if (!container) return;
    
    const posts = container.querySelectorAll('.blog-post');
    
    if (posts.length === 0 && redirectInfo.currentPage > 1) {
      console.log('需要重定向: 内容为空且不是第一页');
      window.location.href = `/posts/tag/${redirectInfo.encodedTag}`;
      return;
    }
    
    // 为所有标签链接添加点击事件，阻止事件冒泡
    document.querySelectorAll('.blog-post-tags .post-tags a').forEach(tag => {
      tag.addEventListener('click', (e) => {
        e.stopPropagation();
      });
    });
  });
</script>

<style>
  .tag-container {
    margin: 1.5rem 0;
    text-align: center;
    font-size: 1.2rem;
  }

  .tag {
    display: inline-block;
    padding: 0.5rem 1rem;
    font-weight: 600;
  }

  /* 分页容器 */
  .pagination-container {
    display: flex;
    justify-content: center;
    width: 100%;
    margin: 1rem 0 2rem;
  }
  
  /* 新增瀑布流布局容器 */
  .masonry-container {
    display: flex;
    justify-content: center;
    width: 100%;
    padding: 0;
    margin: 0;
    max-width: 100%;
  }

  /* 新增瀑布流布局 */
  .masonry-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr); /* 固定3列 */
    gap: 1.5rem;
    margin: 2rem 0;
    max-width: 1200px; /* 限制最大宽度 */
    width: 100%;
  }

  /* 调整博客文章卡片样式 */
  .blog-post {
    margin: 0;
    width: 100%;
    border-radius: 12px;
    background: #ffffff;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    overflow: hidden;
    transition: transform 0.2s ease, box-shadow 0.3s ease, background-color 0.3s ease;
  }
  
  .blog-post:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
    background-color: #fefefe;
  }

  /* 卡片链接 */
  .blog-post-link {
    display: block;
    width: 100%;
    color: inherit;
    text-decoration: none;
  }
  
  /* 图片区域 */
  .blog-post-image {
    width: 100%;
    height: 240px;
    overflow: hidden;
    border-radius: 12px 12px 0 0; /* 只保留上边两个圆角 */
  }
  
  .blog-post-image :global(.post-featured-image) {
    border-radius: 12px 12px 0 0; /* 确保内部容器也有相同的圆角 */
    overflow: hidden;
  }
  
  .blog-post-image :global(img) {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
    border-radius: 12px 12px 0 0 !important; /* 强制覆盖全局样式，只保留上边圆角 */
  }
  
  .blog-post:hover .blog-post-image :global(img) {
    transform: scale(1.05);
  }
  
  /* 内容区域 */
  .blog-post-content {
    padding: 1rem 1.2rem;
  }
  
  .blog-post-header {
    margin-bottom: 0.4rem;
  }
  
  .blog-post-header :global(.post-title) {
    font-size: 16px;
    font-weight: 600;
    line-height: 1.4;
    margin: 0 0 0.2rem 0;
  }
  
  .blog-post-header :global(.post-title a) {
    color: #333;
    transition: color 0.3s ease;
  }
  
  .blog-post:hover .blog-post-header :global(.post-title a) {
    color: #000;
    text-shadow: 0 0 1px rgba(0,0,0,0.1);
  }
  
  .blog-post-tags {
    margin-bottom: 0.4rem;
  }
  
  .blog-post-body {
    font-size: 14px;
    color: #666;
    line-height: 1.5;
  }

  /* 响应式设计 */
  @media (max-width: 1024px) {
    .masonry-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 768px) {
    .masonry-grid {
      grid-template-columns: 1fr;
      max-width: 500px;
    }
    
    .blog-posts-container {
      padding: 0 0.5rem;
    }
    
    .blog-post-image {
      height: 160px;
    }
  }

  @media (max-width: 480px) {
    .blog-post-image {
      height: 140px;
    }
    
    .blog-post-content {
      padding: 1rem;
    }
    
    .blog-post-header :global(.post-title) {
      font-size: 15px;
    }
    
    .blog-post-body {
      font-size: 13px;
    }
  }

  /* 系统字体设置 */
  :root {
    --font-family-sans: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
    --font-family-chinese: "PingFang SC", "Hiragino Sans GB", "Microsoft YaHei", "WenQuanYi Micro Hei", sans-serif;
  }

  /* 博客文章容器 */
  .blog-posts-container {
    padding: 0;
    box-sizing: border-box;
    width: 100%;
  }

  /* 系统字体检测 */
  @supports (font: -apple-system-body) {
    .blog-post-header :global(.post-title), .blog-post-body {
      font-family: "PingFang SC", var(--font-family-sans);
    }
  }

  @supports (-ms-ime-align: auto) {
    .blog-post-header :global(.post-title), .blog-post-body {
      font-family: "Microsoft YaHei", var(--font-family-sans);
    }
  }
</style>
